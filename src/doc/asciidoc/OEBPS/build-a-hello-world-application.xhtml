<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<meta charset="UTF-8"/>
<title>Build a Hello World Application</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event) {
  var epubReader = navigator.epubReadingSystem;
  if (!epubReader) {
    if (window.parent == window || !(epubReader = window.parent.navigator.epubReadingSystem)) {
      return;
    }
  }
  document.body.setAttribute('class', epubReader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Build a Hello World Application" epub:type="chapter" id="build-a-hello-world-application">
<header>
<div class="chapter-header">
<p class="byline"><img src="images/avatars/default.jpg"/> <b class="author">MuleSoft Inc.</b></p>
<h1 class="chapter-title"> <small class="subtitle"><b>BUILD</b> <b>A</b> <b>HELLO</b> <b>WORLD</b> <b>APPLICATION</b></small></h1>
</div>
</header>
<p>It&#8217;s time to roll up your sleeves and build your first Anypoint™ Studio
application!</p>
<p>As the objective of this quick tutorial is get something built and
running fast, this document doesn&#8217;t spend much time explaining
components. More detailed explanations and concepts exist in the
<a href="Build+a+Hello+World+Application/First+Day+with+Mule.asciidoc" class="link">First Day with
Mule</a>﻿ and <a href="Build+a+Hello+World+Application/First+Week+with+Mule.asciidoc" class="link">First
Week with Mule</a>﻿ sections of the
<a href="Build+a+Hello+World+Application/Mule+Fundamentals.asciidoc" class="link">Mule
Fundamentals</a>﻿, but for now, let&#8217;s just see Mule work: you&#8217;re about to
build a very simple application in Studio, deploy it to Studio&#8217;s
embedded server, then interact with the application through a Web
browser.</p>
<section class="sect2" title="Assumptions">
<h3 id="_assumptions">Assumptions</h3>
<p>This tutorial assumes that you
have <a href="Build+a+Hello+World+Application/Download+and+Launch+Anypoint+Studio.asciidoc" class="link">downloaded,
installed, and launched Anypoint Studio</a>﻿,  and that you&#8217;ve read through
the
<a href="Build+a+Hello+World+Application/Anypoint+Studio+Essentials.asciidoc" class="link">Anypoint
Studio Essentials</a>﻿.</p>
</section>
<section class="sect2" title="Creating a New Project">
<h3 id="_creating_a_new_project">Creating a New Project</h3>
<div class="ordered-list arabic complex">
<ol class="arabic">
<li>
<span class="principal">In Anypoint Studio, click <strong>File</strong>﻿ then select <strong>New</strong>﻿ &gt; <strong>Mule Project</strong>﻿.</span>
</li>
<li>
<span class="principal">Studio opens the <strong>New Mule Project</strong>﻿ wizard. In the <strong>Name</strong>﻿ field,
enter the value <code class="literal">My First Project</code>﻿, then click <strong>Finish</strong>﻿.<br/>
<br/>
<img src="images/myfirstproject.png" alt="image"/><br/>
<br/></span>
</li>
<li>
<span class="principal">Studio opens a blank canvas. Begin designing your project by
dragging and dropping an <strong>HTTP Connector</strong>﻿ from the <strong>palette</strong>﻿ onto the
<strong>canvas</strong>﻿. Notice that Studio automatically wraps the connector with a
<strong>flow</strong>﻿, thus saving you the step of manually creating one. <br/>
<br/>
<img src="images/helloworld1.png" alt="image"/><br/>
<br/></span>
</li>
<li>
<span class="principal">Add to your flow with an <strong>Echo Component</strong>﻿, dragging it next to the
HTTP connector on the canvas. </span>
</li>
<li>
<span class="principal">Click the <strong>Configuration XML</strong>﻿ tab (at the base of the canvas) to see
your application represented in XML. Studio&#8217;s two-way editing
functionality ensures that anything you add or change in the graphical
interface is reflected in the XML config. (Use the tabs below to see
both the graphical and XML representations of the application.)</span>
<p><img src="images/messageflow.png" alt="image"/></p>
<p><img src="images/xmlview.png" alt="image"/></p>
</li>
<li>
<span class="principal">Click the <strong>Message Flow</strong>﻿ tab to return to the graphical editor, then
click the <strong>save</strong>﻿ icon to save your project. </span>
</li>
</ol>
</div>
</section>
<section class="sect1" title="Configuring the Project">
<h2 id="_configuring_the_project">Configuring the Project</h2>
<p>Now that you&#8217;ve modeled a basic application in Studio, you can take the
steps to configure each individual element. </p>
<div class="ordered-list arabic complex">
<ol class="arabic">
<li>
<span class="principal">Click the HTTP Connector on the canvas to open its <strong>Properties
Editor</strong>﻿ in the console (see image below).</span>
</li>
<li>
<span class="principal">The HTTP Connector allows your Mule application to connect to Web
resources through the HTTP or HTTPS protocol. In a more complex
application, you would use this editor to configure values for the
attributes so as to define the connection details for your application.
For this project, keep the default values for all fields.<br/>
<br/>
<img src="images/HTTP-unconfig.png" alt="image"/><br/>
<br/></span>
</li>
<li>
<span class="principal">Click the <strong>Echo Component</strong>﻿ on the canvas to open its <strong>Properties
Editor</strong>﻿ in the console (see image below).</span>
</li>
<li>
<span class="principal">The Echo Component simply returns the message payload in response to
the HTTP request. For this project, keep the default values for all
fields.<br/>
<br/>
<img src="images/echo-unconfig.png" alt="image"/><br/>
<br/></span>
</li>
<li>
<span class="principal">Once again, you can click the <strong>Configuration XML</strong>﻿ to view your
changes in the XML config (see code below). Click the <strong>save</strong>﻿ icon to
save your changes.</span>
<figure class="listing">
<pre class="source language-xml"><code><span style="font-style: italic">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>

<span style="font-weight: bold">&lt;mule</span> xmlns:http=<span style="font-style: italic">&quot;http://www.mulesoft.org/schema/mule/http&quot;</span> xmlns=<span style="font-style: italic">&quot;http://www.mulesoft.org/schema/mule/core&quot;</span> xmlns:doc=<span style="font-style: italic">&quot;http://www.mulesoft.org/schema/mule/documentation&quot;</span>
    xmlns:spring=<span style="font-style: italic">&quot;http://www.springframework.org/schema/beans&quot;</span> version=<span style="font-style: italic">&quot;EE-3.5.0&quot;</span>
    xmlns:xsi=<span style="font-style: italic">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    xsi:schemaLocation=<span style="font-style: italic">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd</span>
<span style="font-style: italic">http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd</span>
<span style="font-style: italic">http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd&quot;</span><span style="font-weight: bold">&gt;</span>

    <span style="font-weight: bold">&lt;flow</span> name=<span style="font-style: italic">&quot;my_first_projectFlow1&quot;</span> doc:name=<span style="font-style: italic">&quot;my_first_projectFlow1&quot;</span><span style="font-weight: bold">&gt;</span>
        <span style="font-weight: bold">&lt;http:inbound-endpoint</span> exchange-pattern=<span style="font-style: italic">&quot;request-response&quot;</span> host=<span style="font-style: italic">&quot;localhost&quot;</span> port=<span style="font-style: italic">&quot;8081&quot;</span> doc:name=<span style="font-style: italic">&quot;HTTP&quot;</span><span style="font-weight: bold">/&gt;</span>
        <span style="font-weight: bold">&lt;echo-component</span> doc:name=<span style="font-style: italic">&quot;Echo&quot;</span><span style="font-weight: bold">/&gt;</span>
    <span style="font-weight: bold">&lt;/flow&gt;</span>

<span style="font-weight: bold">&lt;/mule&gt;</span></code></pre>
</figure>
</li>
</ol>
</div>
<section class="sect2" title="Deploying the Project">
<h3 id="_deploying_the_project">Deploying the Project</h3>
<p>Anypoint Studio comes bundled with its own embedded server, ideal for
testing deployments as you code. You can deploy your application on the
embedded server to see it working and perform any debugging activities
before deploying to a production environment, such as an on-premises
server or <a href="Build+a+Hello+World+Application/CloudHub.asciidoc" class="link">CloudHub</a>﻿.</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">In the <strong>Package Explorer</strong>﻿, right click the project name, then select
<strong>Run As</strong>﻿ &gt; <strong>Mule Application</strong>﻿.<br/>
<br/>
<img src="images/runasmuleapp.png" alt="image"/></span>
</li>
<li>
<span class="principal">Studio launches the application on the embedded server, displaying
its actions in the console. When complete, the console message reads
<code class="literal">Started app 'my_first_project' </code>﻿<br/>
<br/>
<img src="images/firstconsole.png" alt="image"/></span>
</li>
</ol>
</div>
</section>
<section class="sect2" title="Interacting with the Project">
<h3 id="_interacting_with_the_project">Interacting with the Project</h3>
<div class="ordered-list arabic complex">
<ol class="arabic">
<li>
<span class="principal">Open a Web browser. </span>
</li>
<li>
<span class="principal">Navigate to your application&#8217;s URL, appending it with a string that
becomes the message payload. For example:<br/>
<br/>
<code class="literal"><a href="http://localhost:8081/Hello_world" class="link">http://localhost:8081/Hello_world</a>﻿</code>﻿<br/>
<br/></span>
</li>
<li>
<span class="principal">The application accepts the request via its HTTP endpoint, then
"echoes" the same payload as the response in your browser.<br/>
<br/>
<img src="images/hello_world.png" alt="image"/><br/>
<br/></span>
</li>
<li>
<span class="principal">In Studio, stop the application from running using the <strong>terminate</strong>﻿
icon in the console (see below).<br/>
<br/>
<img src="images/stopapp.png" alt="image"/></span>
<pre class="screen"> </pre>
</li>
</ol>
</div>
</section>
</section>
</section>
</body>
</html>